// https://leetcode.com/problems/edit-distance/solutions/3230729/rust-dp-2-impls/
impl Solution {
    pub fn min_distance(word1: String, word2: String) -> i32 {
        if word1.len() * word2.len() == 0 {
            return word1.len().max(word2.len()) as _;
        }

        let mut dp = vec![vec![0; word2.len() + 1]; word1.len() + 1];
        for i in 1..=word1.len() {
            dp[i][0] = i;
        }
        for i in 1..=word2.len() {
            dp[0][i] = i;
        }
        for (i, c1) in word1.chars().enumerate() {
            for (j, c2) in word2.chars().enumerate() {
                if c1 == c2 {
                    dp[i + 1][j + 1] = dp[i][j];
                } else {
                    dp[i + 1][j + 1] = dp[i][j].min(dp[i + 1][j].min(dp[i][j + 1])) + 1;
                }
            }
        }
        dp[word1.len()][word2.len()] as _
    }
}