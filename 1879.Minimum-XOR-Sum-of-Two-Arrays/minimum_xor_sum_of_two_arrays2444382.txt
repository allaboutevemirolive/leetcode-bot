// https://leetcode.com/problems/minimum-xor-sum-of-two-arrays/solutions/2444382/rust-solution-using-dp/
use std::collections::*;

impl Solution {
    pub fn minimum_xor_sum(nums1: Vec<i32>, nums2: Vec<i32>) -> i32 {
        let n = nums1.len();
        let limit = 1 << n;
        let mut map = HashMap::new();
        map.insert(0, 0);
        for i in 0..n {
            let mut new_map = HashMap::new();
            let v1 = nums1[i];
            for j in 0..n {
                let v2 = nums2[j];

                for (key, val) in &map {
                    let new_key = key | (1 << j);
                    let entry = new_map.entry(new_key).or_insert(i32::max_value());
                    *entry = std::cmp::min(*entry, val + (v1^v2));
                }
            }
            map = new_map;
        }

        *map.get(&(limit-1)).unwrap()
    }
}