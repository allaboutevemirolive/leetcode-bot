// https://leetcode.com/problems/sudoku-solver/solutions/299458/rust-12ms-solution/
impl Solution {
    pub fn solve_sudoku(board: &mut Vec<Vec<char>>) {
        if board.is_empty() { return; }
        Self::solve(board);
    }
    
    pub fn solve(board: &mut Vec<Vec<char>>) -> bool {
        for row in (0..board.len()) {
            for col in (0..board[row].len()) {
                if board[row][col] != '.' { continue; }
                
                for c in "123456789".chars().collect::<Vec<_>>() {
                    if !Self::is_valid(&board, row, col, c) { continue; }
                    
                    board[row][col] = c;
                    
                    if Self::solve(board) { return true; }
                    
                    board[row][col] = '.';
                }
                
                return false;
            }
        }
        return true;
    }
    
    pub fn is_valid(board: &Vec<Vec<char>>, row: usize, col: usize, c: char) -> bool {
        for i in 0..9 {
            if board[row][i] != '.' && board[row][i] == c { return false; } // check row
            if board[i][col] != '.' && board[i][col] == c { return false; } // check col
            let block = board[(3 * (row as i32 / 3) + i as i32 / 3) as usize][(3 * (col as i32 / 3) + i as i32 % 3) as usize];
            if  block != '.' && block == c { return false; } // check 3 * 3 block;
        }
        true
    }
}