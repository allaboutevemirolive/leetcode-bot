// https://leetcode.com/problems/sudoku-solver/solutions/1376963/rust-runtime-95-74-memory-61-7/
impl Solution {
    pub fn is_valid_sudoku(board: Vec<Vec<char>>) -> bool {
        if board.is_empty() {
            return true;
        }
        let mut row_map: HashMap<usize, u32> = HashMap::with_capacity(9);
        let mut col_map: HashMap<usize, u32> = HashMap::with_capacity(9);
        let mut box_map: HashMap<usize, u32> = HashMap::with_capacity(9);

        for (row_index, row) in board.into_iter().enumerate() {
            for (col_index, character) in  row.into_iter().enumerate() {
                if character == '.' {
                    continue;
                }
                if let Some(digit) = character.to_digit(10) {
                    let integer = digit * 10u32.pow(digit - 1);
                    let box_index = (row_index / 3) * 3 + col_index / 3;

                    let mut map = [
                        (&mut row_map, row_index),
                        (&mut col_map, col_index),
                        (&mut box_map, box_index)
                    ];
                    for (map, index) in map.iter_mut() {
                        if Solution::insert(map, *index, integer, digit) == false {
                            return false;
                        }
                    }
                }
            }
        }
        true
    }

    fn insert(map: &mut HashMap<usize, u32>, index: usize, value: u32, digit: u32) -> bool {
        if map.contains_key(&index) == false {
            map.insert(index, value);
            return true;
        }
        let current_val = map[&index];
        let val = current_val / 10u32.pow(digit - 1) % 10u32;
        if val == 0 {
            map.insert(index, current_val + value);
            true
        } else {
            false
        }   
    }
}