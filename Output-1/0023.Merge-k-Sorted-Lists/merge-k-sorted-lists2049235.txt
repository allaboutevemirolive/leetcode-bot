// https://leetcode.com/problems/merge-k-sorted-lists/solutions/2049235/rust-divide-and-conquer/
/// O (N log k) where k is the size of the list

type Node = Option<Box<ListNode>>;
use std::collections::VecDeque;
impl Solution {
    pub fn merge_k_lists(mut lists: Vec<Option<Box<ListNode>>>) -> Option<Box<ListNode>> {
        if lists.is_empty() { return None}
        let mut deque: VecDeque<Node> = lists.into_iter().collect();
        
        while deque.len() > 1 { 
            let merged = Self::merge_list(
                deque.pop_front().unwrap(),
                deque.pop_front().unwrap()
            );
            deque.push_back(merged)
        }
        deque.pop_back().unwrap()
        
    }
	/// O(n) where n is the number of nodes
    fn merge_list(root1: Node, root2: Node) -> Node { 
        match (root1, root2) { 
            (Some(mut node1), Some(mut node2)) => { 
                if node1.val > node2.val { 
                    node2.next = 
                        Self::merge_list(Some(node1), node2.next.take());
                    return Some(node2)
                } else { 
                    node1.next = 
                        Self::merge_list(node1.next.take(), Some(node2));
                    return Some(node1)
                }
            },
            (None, None) => return None, 
            (Some(n), None) | (None, Some(n)) => return Some(n.clone())
        }
    }
}



