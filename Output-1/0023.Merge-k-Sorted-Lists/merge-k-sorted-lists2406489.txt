// https://leetcode.com/problems/merge-k-sorted-lists/solutions/2406489/rust-iterative-concise-easy/
impl Solution {
    pub fn merge_k_lists(lists: Vec<Option<Box<ListNode>>>) -> Option<Box<ListNode>> {
		// Collect all values from all nodes in all lists.
        let mut vals = Vec::new();		
        lists.iter().for_each(|list| {
            let mut head = list.as_ref();
            while head.is_some() {
                vals.push(head.unwrap().val);
                head = head.unwrap().next.as_ref();
            }
        });
        vals.sort_unstable();
        
		// Build the returned list in reverse, starting with None.
        let mut head = None;
        vals.iter().rev().for_each(|&val| {
            head = Some(Box::new(ListNode { val, next: head.take() }));
        });
        head
    }
}