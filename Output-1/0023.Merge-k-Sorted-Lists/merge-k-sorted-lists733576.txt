// https://leetcode.com/problems/merge-k-sorted-lists/solutions/733576/rust-cheapest-best/
use std::collections::BinaryHeap;

impl Solution {
    pub fn merge_k_lists(lists: Vec<Option<Box<ListNode>>>) -> Option<Box<ListNode>> {
        Self::list_from_heap(
            None,
            BinaryHeap::from(lists.iter().fold(vec![], |mut acc, mut cur| {
                while cur.is_some() {
                    acc.push(cur.as_ref().unwrap().val);
                    cur = &cur.as_ref().unwrap().next;
                }
                acc
            })),
        )
    }

    fn list_from_heap(
        mut head: Option<Box<ListNode>>,
        mut heap: BinaryHeap<i32>,
    ) -> Option<Box<ListNode>> {
        while !heap.is_empty() {
            head = Some(Box::new(ListNode {
                val: heap.pop().unwrap(),
                next: head,
            }));
        }
        head
    }
}