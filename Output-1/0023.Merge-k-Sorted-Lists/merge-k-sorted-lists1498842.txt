// https://leetcode.com/problems/merge-k-sorted-lists/solutions/1498842/rust-0ms-solution-using-unsafe/
use std::ptr::copy_nonoverlapping;
use std::collections::BinaryHeap;
use std::cmp::Reverse;
impl Solution {
    pub fn merge_k_lists(mut lists: Vec<Option<Box<ListNode>>>) -> Option<Box<ListNode>> {
	    //head is the first node in our linked list
        let mut head: Option<Box<ListNode>> = None;
		//tail will be the last non-null node in our linked list
		//Since Box is a unique pointer, technically this tail should be owned by head,
		//so it's unsafe to have both head and tail since if tail is dropped,
		//the destructor would free a node in the linked list owned by head.
		//This is why we need to use unsafe copy_nonoverlapping to avoid destructors from being triggered
		//when we mutate head and tail.
        let mut tail: Option<Box<ListNode>> = None;
        
        let mut inds = BinaryHeap::new();
        for (i, list) in lists.iter().enumerate() {
            match list {
                None => (),
                Some(ref ptr) => inds.push((Reverse(ptr.val), i))
            }
        }
        
        unsafe {
            while let Some((val, idx)) = inds.pop() {
                match &mut tail {
                    None => {
					    //If linked list is empty, set head = tail = lists[idx]
                        copy_nonoverlapping(&lists[idx], &mut head, 1);
                        copy_nonoverlapping(&head, &mut tail, 1);
                    },
                    Some(ref mut tail_ptr) => {
					    //Otherwise, set tail->next = lists[idx]
                        //to append the head of lists[idx] onto the end of the linked list
                        copy_nonoverlapping(&lists[idx], &mut tail_ptr.next, 1);
                        copy_nonoverlapping(&tail_ptr.next, &mut tail, 1);
                    }
                };
                //The head of lists[idx] has been added to the linked list,
                //so remove the head from lists[idx]: lists[idx] = lists[idx]->next
                copy_nonoverlapping(&lists[idx].as_ref().unwrap().next, &mut lists[idx], 1);
                //If lists[idx] still has nodes to process,
                //add the new head of lists[idx] to the priority queue
                match &lists[idx] {
                    None => (),
                    Some(ref ptr) => inds.push((Reverse(ptr.val), idx))
                }
            }
            
            //To avoid tail being dropped at the end of the function,
            //"leak" the tail.
            //This is not a real memory leak because tail is also owned
            //by the linked list in head and thus will be freed when head is freed.
            if let Some(tail_box) = tail {
                Box::leak(tail_box);
            }
        }
        
        head
    }
}