// https://leetcode.com/problems/reverse-nodes-in-k-group/solutions/436397/rust-0ms-o-n-time-o-1-space/

impl Solution {
    fn find_last<'a>(mut x: &'a mut Option<Box<ListNode>>, mut cnt: Option<&mut i32>) -> &'a mut Option<Box<ListNode>> {
        while x.as_ref().unwrap().next.is_some() {
            x = &mut x.as_mut().unwrap().next;
            cnt.as_mut().map(|x| **x += 1);
        }
        x
    }

    pub fn reverse_k_group(mut head: Option<Box<ListNode>>, k: i32) -> Option<Box<ListNode>> {
        if head.is_none() {
            return head;
        }
        let mut total_cnt = 1;
        Self::find_last(&mut head, Some(&mut total_cnt));
        total_cnt = total_cnt / k * k;


        let mut dummy = Some(Box::new(ListNode::new(-1)));
        let mut h = &mut dummy;
        let mut cnt = 0;

        while let Some(mut node) = head {
            if cnt == total_cnt {
                h = Self::find_last(h, None);
                h.as_mut().unwrap().next = Some(node);
                break;
            }
            head = node.next.take();

            if cnt % k == 0 {
                h = Self::find_last(h, None);
            }
            node.next = h.as_mut().unwrap().next.take();
            h.as_mut().unwrap().next = Some(node);
            cnt += 1;
        }
        dummy.unwrap().next
    }
}
