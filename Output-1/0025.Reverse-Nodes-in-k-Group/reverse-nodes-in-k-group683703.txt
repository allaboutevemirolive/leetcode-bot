// https://leetcode.com/problems/reverse-nodes-in-k-group/solutions/683703/0ms-rust-solution-constant-memory-no-heap-allocation/
impl Solution {
    pub fn reverse_k_group(mut head: Option<Box<ListNode>>, k: i32) -> Option<Box<ListNode>> {
        let mut rev_head = ListNode::new(0);
		
		// This guy points to the next field of the last element in rev_head
        let mut last = &mut rev_head.next;

        loop {
            let (reversed, leftover) = reverse(head, k as usize);

            match (reversed, leftover) {
				// Reversed some stuff and we might have extra elements left over
                (Some(reversed), leftover) => {
                    head = leftover;
                    *last = Some(reversed);

                    for _ in 0..k {
                        match last.as_mut() {
                            Some(last_ref) => last = &mut last_ref.next,
                            None => unreachable!(),
                        }
                    }
                },
				// Nothing more has been reversed; we might have a leftover and the job is done
                (None, leftover) => {
                    *last = leftover;
                    break
                },
            }
        }


        rev_head.next
    }
}

/// # Returns
/// `(reversed, leftover)`
/// If there were more than `count` nodes, reversed contains the reversed nodes. Else, it's None.
/// Leftover contains the nodes that weren't reversed (if any).
fn reverse(mut head: Option<Box<ListNode>>, count: usize) -> (Option<Box<ListNode>>, Option<Box<ListNode>>) {
    let mut rev_head = ListNode::new(0);
	
	// put the elements from head into target, in reversed order.
    let rev = |head: &mut Option<Box<ListNode>>, target: &mut ListNode| {
        let mut i = 0;

        while let Some(ref mut node) = head {
            let new_node = node.next.take();
            let back = target.next.take();
            node.next = back;
            target.next = head.take();
            *head = new_node;
    
            i += 1;
    
            if i == count {
                break;
            }
        }

        i
    };

    let r = rev(&mut head, &mut rev_head);

    let mut reversed = rev_head.next;
	
	// We haven't reversed enough nodes, thus we need to put them back into the original order
	// And return them as leftover
    if r < count {
        let mut undo_head = ListNode::new(0);

        // Not enough nodes, we have to put them back into the same order
        rev(&mut reversed, &mut undo_head);

        (None, undo_head.next)
    } else {
		// We've reversed enough nodes, return them as reversed and head as leftover
        (reversed, head)
    }
}