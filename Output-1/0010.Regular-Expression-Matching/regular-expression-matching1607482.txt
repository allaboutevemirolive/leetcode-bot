// https://leetcode.com/problems/regular-expression-matching/solutions/1607482/rust-recursion-solution-with-str-without-vec/
impl Solution {
    pub fn is_match(s: String, p: String) -> bool {
        return Solution::is_match_str(&s, &p);
    }
    pub fn is_match_str(s: &str, p: &str) -> bool{
        let (p_len, s_len) = (p.len(), s.len());
        if p_len == 0 {
            return s_len ==0;
        }
        else if p.get(p_len -1..p_len).unwrap() == "*"{
            if Solution::is_match_str(s, &p.get(..p_len-2).unwrap()){
                return true;
            }
            else if s_len == 0 {
                return false;
            }
            else if s.get(s_len -1..s_len).unwrap() == p.get(p_len -2..p_len-1).unwrap() || p.get(p_len -2..p_len-1).unwrap() == "."{
                return Solution::is_match_str(&s.get(..s_len-1).unwrap(), p);
            }
        }
        if s_len != 0 {
            if s.get(s_len-1..s_len).unwrap() == p.get(p_len-1..p_len).unwrap() || p.get(p_len-1..p_len).unwrap() == "."{
                return Solution::is_match_str(&s.get(..s_len-1).unwrap(), &p.get(..p_len-1).unwrap());
            }
        }
        false
    }
}