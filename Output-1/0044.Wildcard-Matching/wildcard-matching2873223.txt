// https://leetcode.com/problems/wildcard-matching/solutions/2873223/rust-solution-using-2d-dp/
impl Solution {
    pub fn is_match(s: String, p: String) -> bool {
        let mut dp = vec![vec![false; p.len() + 1]; s.len() + 1];

        dp[0][0] = true;

        for i in 0..=s.len() {
            for j in 1..=p.len() {
                if p.chars().nth(j - 1).unwrap() == '*' {
                    dp[i][j] = dp[i][j - 1] || (i > 0 && dp[i - 1][j]);
                } else {
                    dp[i][j] = i > 0 && dp[i - 1][j - 1] &&
                        (
                            s.chars().nth(i - 1).unwrap() == p.chars().nth(j - 1).unwrap() ||
                            p.chars().nth(j - 1).unwrap() == '?'
                        );
                }
            }
        }

        dp[s.len()][p.len()]
    }
}