// https://leetcode.com/problems/reverse-nodes-in-k-group/solutions/3098562/safe-simple-iterative-one-pass-beats-100/
impl Solution {
    pub fn reverse_k_group(mut head: Option<Box<ListNode>>, k: i32) -> Option<Box<ListNode>> {
        let mut sentinel = ListNode::new(-1);
        let mut last_solution_node = &mut sentinel;

        // Perform reversal of k groups without counting.
        loop {
            // Leetcode please please please update your rust compiler for once.  I originally
            // used break labels instead of this silly pattern.
            let mut b = false;
            for _ in 0..k {
                if let Some(mut current) = head.take() {
                    head = current.next.take();
                    current.next = last_solution_node.next.take();
                    last_solution_node.next = Some(current);
                } else {
                    b = true;
                    break;
                }
            }
            if b { break }
            while let Some(ref mut next) = last_solution_node.next {
                last_solution_node = next;
            }
        };

        // Re-reverse the leftover group.
        let mut final_reversal_head = ListNode::new(-1);
        while let Some(mut current) = last_solution_node.next.take() {
            last_solution_node.next = current.next.take();
            current.next = final_reversal_head.next.take();
            final_reversal_head.next = Some(current);
        }
        last_solution_node.next = final_reversal_head.next.take();
        sentinel.next.take()
    }
}
