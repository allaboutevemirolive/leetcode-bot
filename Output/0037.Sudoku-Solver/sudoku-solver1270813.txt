// https://leetcode.com/problems/sudoku-solver/solutions/1270813/rust-0ms-2mb-solution-in-50-lines/
impl Solution {
    pub fn solve_sudoku(board: &mut Vec<Vec<char>>) {
        Self::solve_sudoku_helper(board, 0);
    }
    
    fn solve_sudoku_helper(board: &mut Vec<Vec<char>>, n: usize) -> bool {
        if n == 81 {
            return true;
        }

        let (i, j) = (n / 9, n % 9);
        if board[i][j] != '.' {
            return Self::solve_sudoku_helper(board, n + 1);
        }

        let mask = Self::check(board, i, j);
        for b in 1..=9 {
            if (mask >> b) & 1 == 1 {
                continue;
            }
            board[i][j] = std::char::from_digit(b, 10).unwrap();
            if Self::solve_sudoku_helper(board, n+1) { return true; }
            board[i][j] = '.';
        }
        false
    }

    
    fn check(board: &Vec<Vec<char>>, i: usize, j: usize) -> u16 {
        let mut res = 0;
        for n in 0..9 {
            let rc = board[i][n];
            let cc = board[n][j];
            let sc = board[i/3*3+n/3][(j/3*3)+(n%3)];
            Self::mask(&mut res, rc);
            Self::mask(&mut res, cc);
            Self::mask(&mut res, sc);
        }
        res
    }
    
    #[inline]
    fn mask(x: &mut u16, c: char) {
        match c {
            '.' => {},
            c => {
                *x |= 1 << (c.to_digit(10).unwrap());
            }
        }
    }
}