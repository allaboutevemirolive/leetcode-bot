// https://leetcode.com/problems/sum-of-distances-in-tree/solutions/2941740/recursive-dp/
impl Solution {
    pub fn sum_of_distances_in_tree(n: i32, edges: Vec<Vec<i32>>) -> Vec<i32> {
        use std::collections::{HashMap, HashSet};
        const NO_PARENT: i32 = -1;
        // returns pair: (nr ancestors of root, sum distances of tree with root)
        fn nr_ancestors_and_subtree_sum(cache: &mut HashMap<(i32, i32), (i32, i32)>, graph: &HashMap<i32, HashSet<i32>>, parent: i32, root: i32) -> (i32, i32) {
            let mut res;
            if let Some(cached_res) = cache.get(&(parent, root)) {
                res = cached_res.clone()
            } else {
                if let Some(connections) = graph.get(&root) {

                    res = if parent == NO_PARENT 
                        {
                            (0, 0)
                        } else {
                            (1, 0)
                        };

                    for con in connections {
                        if *con != parent {
                            let tres = nr_ancestors_and_subtree_sum(cache, graph, root, *con);
                            res = (res.0 + tres.0, res.1 + tres.0 + tres.1);
                        }
                    }

                } else {
                    res = (0, 0)
                }
                cache.insert((parent, root), res);
            }
            res
        }
        //populate the lookup structure
        let mut graph: HashMap<i32, HashSet<i32>> = HashMap::new();
        let mut dp_cache: HashMap<(i32, i32), (i32, i32)> = HashMap::new();

        for head in edges {
            //a -> b
            graph.entry(head[0]).or_insert(HashSet::new()).insert(head[1]);

            //b -> a
            graph.entry(head[1]).or_insert(HashSet::new()).insert(head[0]);
        }

        let mut res: Vec<i32> = vec![0; n as usize];
        
        for i in 0..n as usize {
            res[i] = nr_ancestors_and_subtree_sum(&mut dp_cache, &graph, NO_PARENT, i as i32).1;
        }
        
        res

    }
}