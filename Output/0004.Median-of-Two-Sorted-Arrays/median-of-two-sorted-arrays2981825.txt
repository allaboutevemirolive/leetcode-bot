// https://leetcode.com/problems/median-of-two-sorted-arrays/solutions/2981825/rust-log-time-solution/
const INF: f64 = std::f64::INFINITY;

fn getty(l: &Vec<i32>, index: usize) -> (f64, f64) {
    let left = match index {
        0 => -INF, // so the other left is chosen when maxing
        x => l[x - 1] as f64 // left shouldn't be on the right of l (raises error)
    };
    
    let right = match index { // similar logic applies
        _ if index == l.len() => INF,
        x => l[x] as f64 
    };

    return (left, right);
}

impl Solution {
    pub fn find_median_sorted_arrays(nums1: Vec<i32>, nums2: Vec<i32>) -> f64 {
        let (n1, n2) = (nums1.len(), nums2.len());
        if n1 > n2 { // make first arg smaller
            return Solution::find_median_sorted_arrays(nums2, nums1);
        }

        let total = n1 + n2;
        let half = total >> 1;
        let (mut lo, mut hi) = (0, n1); // bounds for left (inclusive)
        let (mut c1, mut c2); 

        loop {
            let l = lo + hi >> 1;
            c1 = getty(&nums1, l);
            c2 = getty(&nums2, half - l);

            if c1.0 > c2.1 {
                hi = l - 1;
            } else if c1.1 < c2.0 {
                lo = l + 1;
            } else {
                break;
            }
        }

        match total % 2 {
            0 => (c1.0.max(c2.0) + c1.1.min(c2.1)) / 2.0,
            _ => c1.1.min(c2.1)
        }
    }
}