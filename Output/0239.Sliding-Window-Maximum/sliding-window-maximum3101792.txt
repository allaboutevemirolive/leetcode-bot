// https://leetcode.com/problems/sliding-window-maximum/solutions/3101792/runtime-1029-ms-but-it-passed/
impl Solution {
    pub fn max_of_slice(nums: &Vec<i32>, dp: &mut Vec<usize>, i : usize, k : usize) -> i32
    {
        // println!("{} for {:?}", i, &nums[i..i+k]);
        let mut index = usize::MAX;
        let mut max = i32::MIN;
        // if i > 0
        if i > 0 && i <= dp[i-1] && dp[i-1] < i + k {
            index = dp[i-1];
            max = nums[index];
            if max <= nums [i + k - 1]{
                index = i + k - 1;
                max = nums[index];
            }

        }
        else{
            for j in i..i+k {
                if max <= nums[j] {
                    index = j;
                    max = nums[index];
                }
            }
        }
        dp[i] = index;
        return max;

    }


    pub fn max_sliding_window(nums: Vec<i32>, k: i32) -> Vec<i32> {
        let k = k as usize;

        let mut max_list = vec![];
        let mut dp = vec![nums.len();nums.len() - k + 1];

        for i in 0..=nums.len() - k {
            max_list.push( Solution::max_of_slice(&nums, &mut dp, i, k) );
        }

        println!("dp is {:?}", dp);
        return max_list;
    }
}