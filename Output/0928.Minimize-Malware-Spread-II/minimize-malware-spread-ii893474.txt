// https://leetcode.com/problems/minimize-malware-spread-ii/solutions/893474/rust-translated-36ms-100/
impl Solution {
    pub fn min_malware_spread(graph: Vec<Vec<i32>>, mut initial: Vec<i32>) -> i32 {
        use std::collections::HashSet;

        fn dfs(graph: &Vec<Vec<i32>>, clean: &Vec<i32>, u: i32, visited: &mut HashSet<i32>) {
            for v in 0..graph.len() {
                if graph[u as usize][v] == 1 && clean[v] == 1 && !visited.contains(&(v as i32)) {
                    visited.insert(v as i32);
                    dfs(graph, clean, v as i32, visited);
                };
            }
        }
        let n = graph.len();
        let mut clean = vec![1; n];
        for &x in &initial {
            clean[x as usize] = 0;
        }
        let mut infected = vec![Vec::<i32>::new(); n];
        for &u in &initial {
            let mut visited = HashSet::<i32>::new();
            dfs(&graph, &clean, u, &mut visited);
            for &v in visited.iter() {
                infected[v as usize].push(u);
            }
        }
        let mut contribution = vec![0; n];
        for v in 0..n {
            if infected[v].len() == 1 {
                contribution[infected[v][0] as usize] += 1;
            }
        }
        initial.sort_unstable();
        let mut ans = initial[0];
        let mut ans_size = -1;
        for u in initial {
            let score = contribution[u as usize];
            if score > ans_size || score == ans_size && u < ans {
                ans = u;
                ans_size = score;
            }
        }
        ans
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_min_malware_spread() {
        assert_eq!(
            Solution::min_malware_spread(
                vec![vec![1, 1, 0], vec![1, 1, 0], vec![0, 0, 1]],
                vec![0, 1]
            ),
            0
        );
    }

    #[test]
    fn test_min_malware_spread_02() {
        assert_eq!(
            Solution::min_malware_spread(
                vec![vec![1, 1, 0], vec![1, 1, 1], vec![0, 1, 1]],
                vec![0, 1]
            ),
            1
        );
    }

    #[test]
    fn test_min_malware_spread_03() {
        assert_eq!(
            Solution::min_malware_spread(
                vec![
                    vec![1, 1, 0, 0],
                    vec![1, 1, 1, 0],
                    vec![0, 1, 1, 1],
                    vec![0, 0, 1, 1]
                ],
                vec![0, 1]
            ),
            1
        );
    }
}