// https://leetcode.com/problems/regular-expression-matching/solutions/3020270/recursion/
impl Solution {
    pub fn is_match(s: String, p: String) -> bool {
    fn recursive(s: &str, p: &str, i: i32, j: i32) -> bool {
        if i < 0 && j < 0 {
            return true;
        }
        if j < 0 || (i < 0 && &p[(j as usize)..(j as usize + 1)] != "*") {
            return false;
        }
        if i < 0 && &p[(j as usize)..(j as usize + 1)] == "*" {
            return recursive(s, p, i, j - 2);
        }

        if &s[i as usize..i as usize + 1] == &p[j as usize..j as usize + 1]
            || &p[j as usize..j as usize + 1] == "."
        {
            return recursive(s, p, i - 1, j - 1);
        }

        if &p[j as usize..j as usize + 1] == "*" {
            let mut result = false;
            if &s[i as usize..i as usize + 1] == &p[j as usize - 1..j as usize]
                || &p[j as usize - 1..j as usize] == "."
            {
                result = recursive(s, p, i - 1, j);
            }

            if !result {
                return recursive(s, p, i, j - 2);
            } else {
                return result;
            }
        }

        false
    }

    recursive(&s, &p, s.len() as i32 - 1, p.len() as i32 - 1)
}
}