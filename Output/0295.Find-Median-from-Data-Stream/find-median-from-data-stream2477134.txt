// https://leetcode.com/problems/find-median-from-data-stream/solutions/2477134/using-double-ended-queue-vecdeque/
#[derive(Default)]
struct MedianFinder {
    nums: std::collections::VecDeque<i32>
}
impl MedianFinder {
    fn new() -> Self { Self::default() }
    fn add_num(&mut self, num: i32) {
        match self.nums.binary_search(&num) {
            Ok(i)| Err(i) => self.nums.insert(i, num),
        }
    }
    fn find_median(&self) -> f64 {
        let mid = self.nums.len() / 2;
        if self.nums.len() % 2 == 0 {
            let sum = self.nums[mid] + self.nums[mid - 1];
            sum as f64 / 2.
        } else {
            self.nums[mid] as f64
        }
    }
}