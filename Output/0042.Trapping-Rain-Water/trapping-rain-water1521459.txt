// https://leetcode.com/problems/trapping-rain-water/solutions/1521459/rust-solution-using-time-o-n-space-o-n/
use std::cmp;
impl Solution {
    pub fn trap(height: Vec<i32>) -> i32 {
        let mut maxRight:Vec<i32> = vec![0;height.len()];
        let mut maxLeft:Vec<i32> = vec![0;height.len()];
        let mut maxRi = -1;
        let mut maxLi = -1;
        // Looping Through vec to get the relative maxLeft and maxRight at currPoint;
		
        for (i, x) in height.iter().enumerate() {
            maxRi = cmp::max(*x, maxRi);
            maxRight[i] = maxRi;
            maxLi = cmp::max(height[height.len()-1-i], maxLi);
            maxLeft[height.len()-1-i] = maxLi;
        }
        println!("maxRight - {:?}, maxLeft = {:?} ",maxRight, maxLeft);
		
        let mut totalTrappedWater = 0;
		//Formaula for getting water at point i is min(maxLeft, maxRight) - height[i]
        for (i,x) in height.iter().enumerate(){
            let currTrapped = cmp::min(maxLeft[i], maxRight[i]) - *x;
            
            totalTrappedWater += if currTrapped <= 0 {0} else {currTrapped};
        }
        // println!("{}", totalTrappedWater);
        return totalTrappedWater;
    }
}