// https://leetcode.com/problems/valid-number/solutions/1005099/dfa-0-ms-simple-but-long/
enum State {
     Start,
     DigitsAtEndOfNumber,
     FloatNumber,
     FloatNumberAfterSign,
     AfterDotAtStart,
     AfterE,
     AfterDotAfterNumber,
     SpaceAfterNumber,
     DigitOrE,
     SpaceAfterDot,
}

impl Solution {
    pub fn is_number(s: String) -> bool {
        // dbg!(&s);
        let mut state = State::Start;
        let mut is_valid_number = false;
        for current_char in s.chars() {
            // dbg!(&state);
            // dbg!(&current_char);
            match state {
                State::Start => match current_char {
                    ' ' => state = State::Start,
                    '+' | '-' => state = State::FloatNumberAfterSign,
                    '0'..='9' => {
                        state = State::FloatNumber;
                        is_valid_number = true;
                    }
                    '.' => {
                        state = State::AfterDotAtStart;
                        is_valid_number = false;
                    }
                    _ => return false,
                },
                State::DigitsAtEndOfNumber => match current_char {
                    '0'..='9' => {
                        state = State::DigitsAtEndOfNumber;
                        is_valid_number = true;
                    }
                    ' ' => {
                        state = State::SpaceAfterNumber;
                        is_valid_number = true;
                    }
                    _ => return false,
                },
                State::SpaceAfterNumber => match current_char {
                    ' ' => {
                        state = State::SpaceAfterNumber;
                        is_valid_number = true;
                    }
                    _ => return false,
                },
                State::SpaceAfterDot => match current_char {
                    ' ' => {
                        state = State::SpaceAfterDot;
                        is_valid_number = false;
                    }
                    _ => return false,
                },
                State::FloatNumber => match current_char {
                    '0'..='9' => {
                        state = State::FloatNumber;
                        is_valid_number = true;
                    }
                    '.' => {
                        state = State::AfterDotAfterNumber;
                    }
                    'e' => {
                        state = State::AfterE;
                        is_valid_number = false;
                    }
                    ' ' => {
                        state = State::SpaceAfterNumber;
                        is_valid_number = true;
                    }
                    _ => return false,
                },
                State::FloatNumberAfterSign => match current_char {
                    '0'..='9' => {
                        state = State::FloatNumber;
                        is_valid_number = true;
                    }
                    '.' => {
                        state = State::AfterDotAfterNumber;
                    }
                    ' ' => {
                        state = State::SpaceAfterNumber;
                        is_valid_number = true;
                    }
                    _ => return false,
                },
                State::DigitOrE => match current_char {
                    '0'..='9' => {
                        is_valid_number = true;
                        state = State::DigitOrE;
                    }
                    'e' => {
                        is_valid_number = false;
                        state = State::AfterE;
                    }
                    '-' | '+' => {
                        is_valid_number = false;
                        state = State::DigitsAtEndOfNumber;
                    }
                    ' ' => {
                        state = State::SpaceAfterNumber;
                    }

                    _ => return false,
                },
                State::AfterDotAtStart => match current_char {
                    '0'..='9' => {
                        state = State::DigitOrE;
                        is_valid_number = true;
                    }
                    ' ' => {
                        state = State::SpaceAfterDot;
                        is_valid_number = false;
                    }
                    _ => return false,
                },
                State::AfterDotAfterNumber => match current_char {
                    '0'..='9' => {
                        state = State::DigitOrE;
                        is_valid_number = true;
                    }
                    'e' => {
                        state = State::DigitOrE;
                        is_valid_number = false;
                    }
                    ' ' => {
                        state = State::SpaceAfterNumber;
                        is_valid_number = true;
                    }
                    _ => return false,
                },
                State::AfterE => match current_char {
                    '0'..='9' => {
                        state = State::DigitsAtEndOfNumber;
                        is_valid_number = true;
                    }
                    '-' | '+' => {
                        is_valid_number = false;
                        state = State::DigitsAtEndOfNumber;
                    }
                    _ => return false,
                },
            }
        }
        return is_valid_number;
    }
}